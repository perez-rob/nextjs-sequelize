{"ast":null,"code":"import nextConnect from 'next-connect';\nimport { verifyToken } from './utils';\nconst middleware = nextConnect();\n/* Sample using middleware */\n\n/* middleware.use(database).use(session).use(passport.initialize()).use(passport.session()); */\n\n/* Set restricted public access / put any api access that is restricted in here */\n\nconst restricted = ['/api/post/[slug]', '/api/job/[slug]'];\n/*\r\n * @params {request, response, callback} default Request and Response\r\n * @return {object} object if true, response message if false and continue\r\n */\n\nexport default middleware.use(async (req, res, next) => {\n  let authHeader = req.headers.authorization || '';\n  let user = {};\n\n  if (!restricted.includes(req.url) && !authHeader) {\n    return next();\n  }\n\n  if (authHeader) {\n    let sessionID = authHeader.split(' ')[1];\n\n    if (sessionID) {\n      user = verifyToken(sessionID);\n\n      if (user) {\n        /* Could put check against users tables in database  User.find({email:user.email}) */\n        req.user = user;\n      } else {\n        res.statusCode = 401;\n        return res.send({\n          status: 'error',\n          error: 'Expired'\n        });\n      }\n    } else {\n      res.statusCode = 401;\n      return res.send({\n        status: 'error',\n        error: 'Wrong Token'\n      });\n    }\n  } else {\n    res.statusCode = 401;\n    return res.send({\n      status: 'error',\n      error: 'Unauthorized'\n    });\n  }\n\n  return next();\n});","map":null,"metadata":{},"sourceType":"module"}