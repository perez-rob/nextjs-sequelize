{"ast":null,"code":"import models from '../../db/models/index';\nimport nextConnect from 'next-connect';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nconst KEY = process.env.JWT_KEY;\nconst handler = nextConnect().get((req, res) => {}).post(async (req, res) => {\n  /* Get Post Data */\n  const {\n    email,\n    password\n  } = req.body;\n  /* Any how email or password is blank */\n\n  if (!email || !password) {\n    return res.status(400).json({\n      status: 'error',\n      error: 'Request missing username or password'\n    });\n  }\n  /* Check user in database */\n\n\n  const user = await models.users.findOne({\n    where: {\n      email: email\n    },\n    attributes: ['id', 'email', 'password'],\n    limit: 1\n  });\n  /* Check if exists */\n\n  if (!user) {\n    res.status(400).json({\n      status: 'error',\n      error: 'User Not Found'\n    });\n  }\n  /* Define variables */\n\n\n  const dataUser = user.toJSON();\n  const userId = dataUser.id,\n        userEmail = dataUser.email,\n        userPassword = dataUser.password;\n  /* Check and compare password */\n\n  bcrypt.compare(password, userPassword).then(isMatch => {\n    if (isMatch) {\n      /* User matched */\n\n      /* Create JWT Payload */\n      const payload = {\n        id: userId,\n        email: userEmail\n      };\n      /* Sign token */\n\n      jwt.sign(payload, KEY, {\n        expiresIn: 31556926 // 1 year in seconds\n\n      }, (err, token) => {\n        res.status(200).json({\n          success: true,\n          token: 'Bearer ' + token\n        });\n      });\n    } else {\n      res.status(400).json({\n        status: 'error',\n        error: 'Password incorrect'\n      });\n    }\n  });\n});\nexport default handler;","map":null,"metadata":{},"sourceType":"module"}