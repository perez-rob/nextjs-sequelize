{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport Router, { useRouter } from 'next/router';\nimport Cookies from 'js-cookie';\n/* utils */\n\nimport { absoluteUrl } from '../../middleware/utils';\n/* components */\n\nimport Layout from '../../components/layout/Layout';\nimport FormLogin from '../../components/form/FormLogin';\nconst emailRegEx = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,2|3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n/* login schemas */\n\nconst FORM_DATA_LOGIN = {\n  email: {\n    value: '',\n    label: 'Email',\n    min: 10,\n    max: 36,\n    required: true,\n    validator: {\n      regEx: emailRegEx,\n      error: 'Please insert valid email'\n    }\n  },\n  password: {\n    value: '',\n    label: 'Password',\n    min: 6,\n    max: 36,\n    required: true,\n    validator: {\n      regEx: /^[a-z\\sA-Z0-9\\W\\w]+$/,\n      error: 'Please insert valid password'\n    }\n  }\n};\n\nfunction Login(props) {\n  const router = useRouter();\n  const {\n    origin,\n    referer,\n    baseApiUrl\n  } = props;\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: stateFormData,\n    1: setStateFormData\n  } = useState(FORM_DATA_LOGIN);\n  const {\n    0: stateFormError,\n    1: setStateFormError\n  } = useState([]);\n  const {\n    0: stateFormValid,\n    1: setStateFormValid\n  } = useState(false);\n  const {\n    0: stateFormMessage,\n    1: setStateFormMessage\n  } = useState({});\n\n  function onChangeHandler(e) {\n    const {\n      name,\n      value\n    } = e.currentTarget;\n    setStateFormData(_objectSpread(_objectSpread({}, stateFormData), {}, {\n      [name]: _objectSpread(_objectSpread({}, stateFormData[name]), {}, {\n        value\n      })\n    }));\n    /* validation handler */\n\n    validationHandler(stateFormData, e);\n  }\n\n  async function onSubmitHandler(e) {\n    e.preventDefault();\n\n    let data = _objectSpread({}, stateFormData);\n    /* email */\n\n\n    data = _objectSpread(_objectSpread({}, data), {}, {\n      email: data.email.value || ''\n    });\n    /* password */\n\n    data = _objectSpread(_objectSpread({}, data), {}, {\n      password: data.password.value || ''\n    });\n    /* validation handler */\n\n    const isValid = validationHandler(stateFormData);\n\n    if (isValid) {\n      // Call an external API endpoint to get posts.\n      // You can use any data fetching library\n      setLoading(!loading);\n      const loginApi = await fetch(`${baseApiUrl}/auth`, {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      }).catch(error => {\n        console.error('Error:', error);\n      });\n      let result = await loginApi.json();\n\n      if (result.success && result.token) {\n        Cookies.set('token', result.token); // window.location.href = referer ? referer : \"/\";\n        // const pathUrl = referer ? referer.lastIndexOf(\"/\") : \"/\";\n\n        Router.push('/');\n      } else {\n        setStateFormMessage(result);\n      }\n\n      setLoading(false);\n    }\n  }\n\n  function validationHandler(states, e) {\n    const input = e && e.target.name || '';\n    const errors = [];\n    let isValid = true;\n\n    if (input) {\n      if (states[input].required) {\n        if (!states[input].value) {\n          errors[input] = {\n            hint: `${states[e.target.name].label} required`,\n            isInvalid: true\n          };\n          isValid = false;\n        }\n      }\n\n      if (states[input].value && states[input].min > states[input].value.length) {\n        errors[input] = {\n          hint: `Field ${states[input].label} min ${states[input].min}`,\n          isInvalid: true\n        };\n        isValid = false;\n      }\n\n      if (states[input].value && states[input].max < states[input].value.length) {\n        errors[input] = {\n          hint: `Field ${states[input].label} max ${states[input].max}`,\n          isInvalid: true\n        };\n        isValid = false;\n      }\n\n      if (states[input].validator !== null && typeof states[input].validator === 'object') {\n        if (states[input].value && !states[input].validator.regEx.test(states[input].value)) {\n          errors[input] = {\n            hint: states[input].validator.error,\n            isInvalid: true\n          };\n          isValid = false;\n        }\n      }\n    } else {\n      Object.entries(states).forEach(item => {\n        item.forEach(field => {\n          errors[item[0]] = '';\n\n          if (field.required) {\n            if (!field.value) {\n              errors[item[0]] = {\n                hint: `${field.label} required`,\n                isInvalid: true\n              };\n              isValid = false;\n            }\n          }\n\n          if (field.value && field.min >= field.value.length) {\n            errors[item[0]] = {\n              hint: `Field ${field.label} min ${field.min}`,\n              isInvalid: true\n            };\n            isValid = false;\n          }\n\n          if (field.value && field.max <= field.value.length) {\n            errors[item[0]] = {\n              hint: `Field ${field.label} max ${field.max}`,\n              isInvalid: true\n            };\n            isValid = false;\n          }\n\n          if (field.validator !== null && typeof field.validator === 'object') {\n            if (field.value && !field.validator.regEx.test(field.value)) {\n              errors[item[0]] = {\n                hint: field.validator.error,\n                isInvalid: true\n              };\n              isValid = false;\n            }\n          }\n        });\n      });\n    }\n\n    if (isValid) {\n      setStateFormValid(isValid);\n    }\n\n    setStateFormError(_objectSpread({}, errors));\n    return isValid;\n  }\n\n  return __jsx(Layout, {\n    title: \"Next.js with Sequelize | Login page\",\n    url: `${origin}${router.asPath}`,\n    origin: origin\n  }, __jsx(\"div\", {\n    className: \"container\"\n  }, __jsx(\"main\", {\n    className: \"content-detail\"\n  }, __jsx(Link, {\n    href: {\n      pathname: '/user'\n    }\n  }, __jsx(\"a\", null, \"\\u2190 Back\")), __jsx(FormLogin, {\n    props: {\n      onSubmitHandler,\n      onChangeHandler,\n      loading,\n      stateFormData,\n      stateFormError,\n      stateFormMessage\n    }\n  }))));\n}\n/* getServerSideProps */\n\n\nexport async function getServerSideProps(context) {\n  const {\n    req\n  } = context;\n  const {\n    origin\n  } = absoluteUrl(req);\n  const referer = req.headers.referer || '';\n  const baseApiUrl = `${origin}/api`;\n  return {\n    props: {\n      origin,\n      referer,\n      baseApiUrl\n    }\n  };\n}\nexport default Login;","map":null,"metadata":{},"sourceType":"module"}