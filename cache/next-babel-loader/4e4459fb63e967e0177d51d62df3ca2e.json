{"ast":null,"code":"import nextConnect from 'next-connect';\nimport { verifyToken } from './utils';\nconst middleware = nextConnect();\n/* Sample using middleware */\n\n/* middleware.use(database).use(session).use(passport.initialize()).use(passport.session()); */\n\n/* Set restricted public access / put any api access that is restricted in here */\n\nconst restricted = ['/api/post/[slug]', '/api/job/[slug]'];\n/*\r\n * @params {request, response, callback} default Request and Response\r\n * @return {object} object if true, response message if false and continue\r\n */\n\nexport default middleware.use(async (req, res, next) => {\n  let authHeader = req.headers.authorization || '';\n  let user = {};\n\n  if (!restricted.includes(req.url) && !authHeader) {\n    return next();\n  }\n\n  if (authHeader) {\n    let sessionID = authHeader.split(' ')[1];\n\n    if (sessionID) {\n      user = verifyToken(sessionID);\n\n      if (user) {\n        /* Could put check against users tables in database  User.find({email:user.email}) */\n        req.user = user;\n      } else {\n        res.statusCode = 401;\n        return res.send({\n          status: 'error',\n          error: 'Expired'\n        });\n      }\n    } else {\n      res.statusCode = 401;\n      return res.send({\n        status: 'error',\n        error: 'Wrong Token'\n      });\n    }\n  } else {\n    res.statusCode = 401;\n    return res.send({\n      status: 'error',\n      error: 'Unauthorized'\n    });\n  }\n\n  return next();\n});","map":{"version":3,"sources":["C:/Users/bobwp/Desktop/Coding-Bootcamp/Test-Projects/nextjs-sequelize/middleware/auth.js"],"names":["nextConnect","verifyToken","middleware","restricted","use","req","res","next","authHeader","headers","authorization","user","includes","url","sessionID","split","statusCode","send","status","error"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,cAAxB;AACA,SAASC,WAAT,QAA4B,SAA5B;AAEA,MAAMC,UAAU,GAAGF,WAAW,EAA9B;AAEA;;AACA;;AAEA;;AACA,MAAMG,UAAU,GAAG,CAAC,kBAAD,EAAqB,iBAArB,CAAnB;AAEA;AACA;AACA;AACA;;AACA,eAAeD,UAAU,CAACE,GAAX,CAAe,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AACtD,MAAIC,UAAU,GAAGH,GAAG,CAACI,OAAJ,CAAYC,aAAZ,IAA6B,EAA9C;AACA,MAAIC,IAAI,GAAG,EAAX;;AAEA,MAAI,CAACR,UAAU,CAACS,QAAX,CAAoBP,GAAG,CAACQ,GAAxB,CAAD,IAAiC,CAACL,UAAtC,EAAkD;AAChD,WAAOD,IAAI,EAAX;AACD;;AACD,MAAIC,UAAJ,EAAgB;AACd,QAAIM,SAAS,GAAGN,UAAU,CAACO,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAhB;;AACA,QAAID,SAAJ,EAAe;AACbH,MAAAA,IAAI,GAAGV,WAAW,CAACa,SAAD,CAAlB;;AACA,UAAIH,IAAJ,EAAU;AACR;AACAN,QAAAA,GAAG,CAACM,IAAJ,GAAWA,IAAX;AACD,OAHD,MAGO;AACLL,QAAAA,GAAG,CAACU,UAAJ,GAAiB,GAAjB;AACA,eAAOV,GAAG,CAACW,IAAJ,CAAS;AACdC,UAAAA,MAAM,EAAE,OADM;AAEdC,UAAAA,KAAK,EAAE;AAFO,SAAT,CAAP;AAID;AACF,KAZD,MAYO;AACLb,MAAAA,GAAG,CAACU,UAAJ,GAAiB,GAAjB;AACA,aAAOV,GAAG,CAACW,IAAJ,CAAS;AACdC,QAAAA,MAAM,EAAE,OADM;AAEdC,QAAAA,KAAK,EAAE;AAFO,OAAT,CAAP;AAID;AACF,GArBD,MAqBO;AACLb,IAAAA,GAAG,CAACU,UAAJ,GAAiB,GAAjB;AACA,WAAOV,GAAG,CAACW,IAAJ,CAAS;AACdC,MAAAA,MAAM,EAAE,OADM;AAEdC,MAAAA,KAAK,EAAE;AAFO,KAAT,CAAP;AAID;;AACD,SAAOZ,IAAI,EAAX;AACD,CApCc,CAAf","sourcesContent":["import nextConnect from 'next-connect';\r\nimport { verifyToken } from './utils';\r\n\r\nconst middleware = nextConnect();\r\n\r\n/* Sample using middleware */\r\n/* middleware.use(database).use(session).use(passport.initialize()).use(passport.session()); */\r\n\r\n/* Set restricted public access / put any api access that is restricted in here */\r\nconst restricted = ['/api/post/[slug]', '/api/job/[slug]'];\r\n\r\n/*\r\n * @params {request, response, callback} default Request and Response\r\n * @return {object} object if true, response message if false and continue\r\n */\r\nexport default middleware.use(async (req, res, next) => {\r\n  let authHeader = req.headers.authorization || '';\r\n  let user = {};\r\n\r\n  if (!restricted.includes(req.url) && !authHeader) {\r\n    return next();\r\n  }\r\n  if (authHeader) {\r\n    let sessionID = authHeader.split(' ')[1];\r\n    if (sessionID) {\r\n      user = verifyToken(sessionID);\r\n      if (user) {\r\n        /* Could put check against users tables in database  User.find({email:user.email}) */\r\n        req.user = user;\r\n      } else {\r\n        res.statusCode = 401;\r\n        return res.send({\r\n          status: 'error',\r\n          error: 'Expired',\r\n        });\r\n      }\r\n    } else {\r\n      res.statusCode = 401;\r\n      return res.send({\r\n        status: 'error',\r\n        error: 'Wrong Token',\r\n      });\r\n    }\r\n  } else {\r\n    res.statusCode = 401;\r\n    return res.send({\r\n      status: 'error',\r\n      error: 'Unauthorized',\r\n    });\r\n  }\r\n  return next();\r\n});\r\n"]},"metadata":{},"sourceType":"module"}