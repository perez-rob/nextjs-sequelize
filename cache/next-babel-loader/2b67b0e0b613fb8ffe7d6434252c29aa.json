{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\n/* utils */\n\n/* components */\nimport Layout from '../../components/layout/Layout';\nimport FormJob from '../../components/form/FormJob';\n/* post schemas */\n\nvar FORM_DATA_JOB = {\n  title: {\n    value: '',\n    label: 'Title',\n    min: 10,\n    max: 36,\n    required: true,\n    validator: {\n      regEx: /^[a-z\\sA-Z0-9\\W\\w]+$/,\n      error: 'Please insert valid Title'\n    }\n  },\n  content: {\n    value: '',\n    label: 'Content',\n    min: 6,\n    max: 1500,\n    required: true,\n    validator: {\n      regEx: /^[a-z\\sA-Z0-9\\W\\w]+$/,\n      error: 'Please insert valid Content'\n    }\n  },\n  reportManager: {\n    value: '',\n    label: 'Content',\n    min: 6,\n    max: 1500,\n    required: true,\n    validator: {\n      regEx: /^[a-z\\sA-Z0-9\\W\\w]+$/,\n      error: 'Please insert valid Report Manager'\n    }\n  },\n  dateLimit: {\n    value: '',\n    label: 'Date',\n    min: 6,\n    max: 24,\n    required: true,\n    validator: {\n      regEx: /^[a-z\\sA-Z0-9\\W\\w]+$/,\n      error: 'Please insert valid Date limit'\n    }\n  }\n};\n\nfunction Job(props) {\n  var router = useRouter();\n  var origin = props.origin,\n      job = props.job,\n      token = props.token;\n  var baseApiUrl = props.baseApiUrl;\n\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState(FORM_DATA_JOB),\n      stateFormData = _useState2[0],\n      setStateFormData = _useState2[1];\n\n  var _useState3 = useState([]),\n      stateFormError = _useState3[0],\n      setStateFormError = _useState3[1];\n\n  var _useState4 = useState({}),\n      stateFormMessage = _useState4[0],\n      setStateFormMessage = _useState4[1];\n\n  var _useState5 = useState(false),\n      stateFormValid = _useState5[0],\n      setStateFormValid = _useState5[1];\n\n  function onSubmitHandler(_x) {\n    return _onSubmitHandler.apply(this, arguments);\n  }\n\n  function _onSubmitHandler() {\n    _onSubmitHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var data, isValid, jobApi, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              data = _objectSpread({}, stateFormData);\n              /* title */\n\n              data = _objectSpread(_objectSpread({}, data), {}, {\n                title: data.title.value || ''\n              });\n              /* content */\n\n              data = _objectSpread(_objectSpread({}, data), {}, {\n                content: data.content.value || ''\n              });\n              /* reportManager */\n\n              data = _objectSpread(_objectSpread({}, data), {}, {\n                reportManager: data.reportManager.value || ''\n              });\n              /* dateLimit */\n\n              data = _objectSpread(_objectSpread({}, data), {}, {\n                dateLimit: data.dateLimit.value || ''\n              });\n              /* validation handler */\n\n              isValid = validationHandler(stateFormData);\n\n              if (!isValid) {\n                _context.next = 17;\n                break;\n              }\n\n              // Call an external API endpoint to get posts.\n              // You can use any data fetching library\n              setLoading(!loading);\n              _context.next = 11;\n              return fetch(\"\".concat(baseApiUrl, \"/job/[slug]\"), {\n                method: 'POST',\n                headers: {\n                  Accept: 'application/json',\n                  'Content-Type': 'application/json',\n                  authorization: token || ''\n                },\n                body: JSON.stringify(data)\n              });\n\n            case 11:\n              jobApi = _context.sent;\n              _context.next = 14;\n              return jobApi.json();\n\n            case 14:\n              result = _context.sent;\n\n              if (result.status === 'success' && result.message && result.message === 'done' && result.data) {\n                router.push({\n                  pathname: result.data.slug ? \"/job/\".concat(result.data.slug) : '/job'\n                });\n              } else {\n                setStateFormMessage(result);\n              }\n\n              setLoading(false);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _onSubmitHandler.apply(this, arguments);\n  }\n\n  function onChangeHandler(e) {\n    var _e$currentTarget = e.currentTarget,\n        name = _e$currentTarget.name,\n        value = _e$currentTarget.value;\n    setStateFormData(_objectSpread(_objectSpread({}, stateFormData), {}, _defineProperty({}, name, _objectSpread(_objectSpread({}, stateFormData[name]), {}, {\n      value: value\n    }))));\n    /* validation handler */\n\n    validationHandler(stateFormData, e);\n  }\n\n  function validationHandler(states, e) {\n    var input = e && e.target.name || '';\n    var errors = [];\n    var isValid = true;\n\n    if (input) {\n      if (states[input].required) {\n        if (!states[input].value) {\n          errors[input] = {\n            hint: \"\".concat(states[e.target.name].label, \" required\"),\n            isInvalid: true\n          };\n          isValid = false;\n        }\n      }\n\n      if (states[input].value && states[input].min > states[input].value.length) {\n        errors[input] = {\n          hint: \"Field \".concat(states[input].label, \" min \").concat(states[input].min),\n          isInvalid: true\n        };\n        isValid = false;\n      }\n\n      if (states[input].value && states[input].max < states[input].value.length) {\n        errors[input] = {\n          hint: \"Field \".concat(states[input].label, \" max \").concat(states[input].max),\n          isInvalid: true\n        };\n        isValid = false;\n      }\n\n      if (states[input].validator !== null && typeof states[input].validator === 'object') {\n        if (states[input].value && !states[input].validator.regEx.test(states[input].value)) {\n          errors[input] = {\n            hint: states[input].validator.error,\n            isInvalid: true\n          };\n          isValid = false;\n        }\n      }\n    } else {\n      Object.entries(states).forEach(function (item) {\n        item.forEach(function (field) {\n          errors[item[0]] = '';\n\n          if (field.required) {\n            if (!field.value) {\n              errors[item[0]] = {\n                hint: \"\".concat(field.label, \" required\"),\n                isInvalid: true\n              };\n              isValid = false;\n            }\n          }\n\n          if (field.value && field.min >= field.value.length) {\n            errors[item[0]] = {\n              hint: \"Field \".concat(field.label, \" min \").concat(field.min),\n              isInvalid: true\n            };\n            isValid = false;\n          }\n\n          if (field.value && field.max <= field.value.length) {\n            errors[item[0]] = {\n              hint: \"Field \".concat(field.label, \" max \").concat(field.max),\n              isInvalid: true\n            };\n            isValid = false;\n          }\n\n          if (field.validator !== null && typeof field.validator === 'object') {\n            if (field.value && !field.validator.regEx.test(field.value)) {\n              errors[item[0]] = {\n                hint: field.validator.error,\n                isInvalid: true\n              };\n              isValid = false;\n            }\n          }\n        });\n      });\n    }\n\n    if (isValid) {\n      setStateFormValid(isValid);\n    }\n\n    setStateFormError(_objectSpread({}, errors));\n    return isValid;\n  }\n\n  function renderJobForm() {\n    return __jsx(React.Fragment, null, __jsx(Link, {\n      href: {\n        pathname: '/job'\n      }\n    }, __jsx(\"a\", null, \"\\u2190 Back\")), __jsx(FormJob, {\n      onSubmit: onSubmitHandler,\n      onChange: onChangeHandler,\n      loading: loading,\n      stateFormData: stateFormData,\n      stateFormError: stateFormError,\n      stateFormValid: stateFormValid,\n      stateFormMessage: stateFormMessage\n    }));\n  }\n\n  function renderJobList() {\n    return __jsx(\"div\", {\n      className: \"card\"\n    }, __jsx(Link, {\n      href: {\n        pathname: '/job'\n      }\n    }, __jsx(\"a\", null, \"\\u2190 Back\")), __jsx(\"h2\", {\n      className: \"sub-title\",\n      style: {\n        display: 'block',\n        marginTop: '.75rem'\n      }\n    }, job.data.title, __jsx(\"small\", {\n      style: {\n        display: 'block',\n        fontWeight: 'normal',\n        marginTop: '.75rem'\n      }\n    }, \"Posted: \", job.data.createdAt)), __jsx(\"p\", null, job.data.content), __jsx(\"p\", null, \"Email: \", job.data.emailTo), __jsx(\"p\", null, \"Report to: \", job.data.reportManager), __jsx(\"p\", null, \"Limit :\", job.data.dateLimit), __jsx(\"hr\", null), \"By: \", job.data.user.firstName || '', \" \", job.data.user.lastName || '');\n  }\n\n  return __jsx(Layout, {\n    title: \"Next.js with Sequelize | Job Page - \".concat(job.data && job.data.title),\n    url: \"\".concat(origin).concat(router.asPath),\n    origin: origin\n  }, __jsx(\"div\", {\n    className: \"container\"\n  }, __jsx(\"main\", {\n    className: \"content-detail\"\n  }, router.asPath === '/job/add' ? renderJobForm() : renderJobList())));\n}\n/* getServerSideProps */\n\n\nexport var __N_SSP = true;\nexport default Job;","map":null,"metadata":{},"sourceType":"module"}