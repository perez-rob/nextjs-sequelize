{"ast":null,"code":"import nextConnect from 'next-connect';\n\nconst models = require('../../../db/models/index');\n\nimport middleware from '../../../middleware/auth';\nconst handler = nextConnect() // Middleware\n.use(middleware) // Get method\n.get(async (req, res) => {\n  const {\n    query: {\n      nextPage\n    },\n    method,\n    body\n  } = req;\n  const users = await models.users.findAndCountAll({\n    include: [{\n      model: models.posts,\n      as: 'posts'\n    }, {\n      model: models.jobs,\n      as: 'jobs'\n    }],\n    order: [// Will escape title and validate DESC against a list of valid direction parameters\n    ['id', 'DESC']],\n    offset: nextPage ? +nextPage : 0,\n    limit: 5\n  });\n  res.statusCode = 200;\n  res.json({\n    status: 'success',\n    data: users.rows,\n    total: users.count,\n    nextPage: +nextPage + 5\n  });\n}) // Post method\n.post(async (req, res) => {\n  const {\n    body\n  } = req;\n  const {\n    slug\n  } = req.query;\n  const {\n    username,\n    email,\n    password\n  } = body;\n  const userId = slug;\n  const newUser = await models.users.create({\n    username,\n    email,\n    password,\n    status: 1\n  });\n  return res.status(200).json({\n    status: 'success',\n    message: 'done',\n    data: newUser\n  });\n}) // Put method\n.put(async (req, res) => {\n  res.end('method - put');\n}) // Patch method\n.patch(async (req, res) => {\n  throw new Error('Throws me around! Error can be caught and handled.');\n});\nexport default handler;","map":{"version":3,"sources":["C:/Users/bobwp/Desktop/Coding-Bootcamp/Test-Projects/nextjs-sequelize/pages/api/user/index.js"],"names":["nextConnect","models","require","middleware","handler","use","get","req","res","query","nextPage","method","body","users","findAndCountAll","include","model","posts","as","jobs","order","offset","limit","statusCode","json","status","data","rows","total","count","post","slug","username","email","password","userId","newUser","create","message","put","end","patch","Error"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,cAAxB;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,0BAAD,CAAtB;;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AAEA,MAAMC,OAAO,GAAGJ,WAAW,GACzB;AADyB,CAExBK,GAFa,CAETF,UAFS,EAGd;AAHc,CAIbG,GAJa,CAIT,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACvB,QAAM;AACJC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF,KADH;AAEJC,IAAAA,MAFI;AAGJC,IAAAA;AAHI,MAIFL,GAJJ;AAMA,QAAMM,KAAK,GAAG,MAAMZ,MAAM,CAACY,KAAP,CAAaC,eAAb,CAA6B;AAC/CC,IAAAA,OAAO,EAAE,CACP;AACEC,MAAAA,KAAK,EAAEf,MAAM,CAACgB,KADhB;AAEEC,MAAAA,EAAE,EAAE;AAFN,KADO,EAKP;AACEF,MAAAA,KAAK,EAAEf,MAAM,CAACkB,IADhB;AAEED,MAAAA,EAAE,EAAE;AAFN,KALO,CADsC;AAW/CE,IAAAA,KAAK,EAAE,CACL;AACA,KAAC,IAAD,EAAO,MAAP,CAFK,CAXwC;AAe/CC,IAAAA,MAAM,EAAEX,QAAQ,GAAG,CAACA,QAAJ,GAAe,CAfgB;AAgB/CY,IAAAA,KAAK,EAAE;AAhBwC,GAA7B,CAApB;AAmBAd,EAAAA,GAAG,CAACe,UAAJ,GAAiB,GAAjB;AACAf,EAAAA,GAAG,CAACgB,IAAJ,CAAS;AACPC,IAAAA,MAAM,EAAE,SADD;AAEPC,IAAAA,IAAI,EAAEb,KAAK,CAACc,IAFL;AAGPC,IAAAA,KAAK,EAAEf,KAAK,CAACgB,KAHN;AAIPnB,IAAAA,QAAQ,EAAE,CAACA,QAAD,GAAY;AAJf,GAAT;AAMD,CArCa,EAsCd;AAtCc,CAuCboB,IAvCa,CAuCR,OAAOvB,GAAP,EAAYC,GAAZ,KAAoB;AACxB,QAAM;AAAEI,IAAAA;AAAF,MAAWL,GAAjB;AACA,QAAM;AAAEwB,IAAAA;AAAF,MAAWxB,GAAG,CAACE,KAArB;AACA,QAAM;AAAEuB,IAAAA,QAAF;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB,MAAgCtB,IAAtC;AACA,QAAMuB,MAAM,GAAGJ,IAAf;AACA,QAAMK,OAAO,GAAG,MAAMnC,MAAM,CAACY,KAAP,CAAawB,MAAb,CAAoB;AACxCL,IAAAA,QADwC;AAExCC,IAAAA,KAFwC;AAGxCC,IAAAA,QAHwC;AAIxCT,IAAAA,MAAM,EAAE;AAJgC,GAApB,CAAtB;AAMA,SAAOjB,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAC1BC,IAAAA,MAAM,EAAE,SADkB;AAE1Ba,IAAAA,OAAO,EAAE,MAFiB;AAG1BZ,IAAAA,IAAI,EAAEU;AAHoB,GAArB,CAAP;AAKD,CAvDa,EAwDd;AAxDc,CAyDbG,GAzDa,CAyDT,OAAOhC,GAAP,EAAYC,GAAZ,KAAoB;AACvBA,EAAAA,GAAG,CAACgC,GAAJ,CAAQ,cAAR;AACD,CA3Da,EA4Dd;AA5Dc,CA6DbC,KA7Da,CA6DP,OAAOlC,GAAP,EAAYC,GAAZ,KAAoB;AACzB,QAAM,IAAIkC,KAAJ,CAAU,oDAAV,CAAN;AACD,CA/Da,CAAhB;AAiEA,eAAetC,OAAf","sourcesContent":["import nextConnect from 'next-connect';\r\nconst models = require('../../../db/models/index');\r\nimport middleware from '../../../middleware/auth';\r\n\r\nconst handler = nextConnect()\r\n  // Middleware\r\n  .use(middleware)\r\n  // Get method\r\n  .get(async (req, res) => {\r\n    const {\r\n      query: { nextPage },\r\n      method,\r\n      body,\r\n    } = req;\r\n\r\n    const users = await models.users.findAndCountAll({\r\n      include: [\r\n        {\r\n          model: models.posts,\r\n          as: 'posts',\r\n        },\r\n        {\r\n          model: models.jobs,\r\n          as: 'jobs',\r\n        },\r\n      ],\r\n      order: [\r\n        // Will escape title and validate DESC against a list of valid direction parameters\r\n        ['id', 'DESC'],\r\n      ],\r\n      offset: nextPage ? +nextPage : 0,\r\n      limit: 5,\r\n    });\r\n\r\n    res.statusCode = 200;\r\n    res.json({\r\n      status: 'success',\r\n      data: users.rows,\r\n      total: users.count,\r\n      nextPage: +nextPage + 5,\r\n    });\r\n  })\r\n  // Post method\r\n  .post(async (req, res) => {\r\n    const { body } = req;\r\n    const { slug } = req.query;\r\n    const { username, email, password } = body;\r\n    const userId = slug;\r\n    const newUser = await models.users.create({\r\n      username,\r\n      email,\r\n      password,\r\n      status: 1,\r\n    });\r\n    return res.status(200).json({\r\n      status: 'success',\r\n      message: 'done',\r\n      data: newUser,\r\n    });\r\n  })\r\n  // Put method\r\n  .put(async (req, res) => {\r\n    res.end('method - put');\r\n  })\r\n  // Patch method\r\n  .patch(async (req, res) => {\r\n    throw new Error('Throws me around! Error can be caught and handled.');\r\n  });\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}